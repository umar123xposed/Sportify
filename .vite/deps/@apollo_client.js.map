{
  "version": 3,
  "sources": ["../../node_modules/rehackt/index.js", "../../node_modules/@apollo/src/index.ts", "../../node_modules/@apollo/src/react/index.ts", "../../node_modules/@apollo/src/react/context/index.ts", "../../node_modules/@apollo/src/react/context/ApolloConsumer.tsx", "../../node_modules/@apollo/src/react/context/ApolloContext.ts", "../../node_modules/@apollo/src/react/context/ApolloProvider.tsx", "../../node_modules/@apollo/src/react/hooks/index.ts", "../../node_modules/@apollo/src/react/hooks/useApolloClient.ts", "../../node_modules/@apollo/src/react/hooks/useLazyQuery.ts", "../../node_modules/@apollo/src/react/hooks/useQuery.ts", "../../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts", "../../node_modules/@apollo/src/react/parser/index.ts", "../../node_modules/@apollo/src/react/hooks/internal/useDeepMemo.ts", "../../node_modules/@apollo/src/react/hooks/internal/useIsomorphicLayoutEffect.ts", "../../node_modules/@apollo/src/react/hooks/internal/useRenderGuard.ts", "../../node_modules/@apollo/src/react/hooks/internal/__use.ts", "../../node_modules/@apollo/src/react/hooks/internal/wrapHook.ts", "../../node_modules/@apollo/src/react/hooks/useMutation.ts", "../../node_modules/@apollo/src/react/hooks/useSubscription.ts", "../../node_modules/@apollo/src/react/hooks/useReactiveVar.ts", "../../node_modules/@apollo/src/react/hooks/useFragment.ts", "../../node_modules/@apollo/src/react/hooks/useSuspenseQuery.ts", "../../node_modules/@apollo/src/react/internal/cache/SuspenseCache.ts", "../../node_modules/@apollo/src/react/internal/cache/QueryReference.ts", "../../node_modules/@apollo/src/react/internal/cache/FragmentReference.ts", "../../node_modules/@apollo/src/react/internal/cache/getSuspenseCache.ts", "../../node_modules/@apollo/src/react/hooks/constants.ts", "../../node_modules/@apollo/src/react/hooks/useBackgroundQuery.ts", "../../node_modules/@apollo/src/react/hooks/useSuspenseFragment.ts", "../../node_modules/@apollo/src/react/hooks/useLoadableQuery.ts", "../../node_modules/@apollo/src/react/hooks/useQueryRefHandlers.ts", "../../node_modules/@apollo/src/react/hooks/useReadQuery.ts", "../../node_modules/@apollo/src/react/query-preloader/createQueryPreloader.ts"],
  "sourcesContent": ["\"use strict\";\nif (0) {\n  // Trick cjs-module-lexer into adding named exports for all React exports.\n  // (if imported with `import()`, they will appear in `.default` as well.)\n  // This way, cjs-module-lexer will let all of react's (named) exports through unchanged.\n  module.exports = require(\"react\");\n}\n// We don't want bundlers to error when they encounter usage of any of these exports.\n// It's up to the package author to ensure that if they access React internals,\n// they do so in a safe way that won't break if React changes how they use these internals.\n// (e.g. only access them in development, and only in an optional way that won't\n// break if internals are not there or do not have the expected structure)\n// @ts-ignore\nmodule.exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = undefined;\n// @ts-ignore\nmodule.exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = undefined;\n// @ts-ignore\nmodule.exports.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = undefined;\n// Here we actually pull in the React library and add everything\n// it exports to our own `module.exports`.\n// If React suddenly were to add one of the above \"polyfilled\" exports,\n// the React version would overwrite our version, so this should be\n// future-proof.\nObject.assign(module.exports, require(\"react\"));\n", "export * from \"./core/index.js\";\nexport * from \"./react/index.js\";\n", "import \"../utilities/globals/index.js\";\n\nexport type { ApolloContextValue } from \"./context/index.js\";\nexport {\n  ApolloProvider,\n  ApolloConsumer,\n  getApolloContext,\n  resetApolloContext,\n} from \"./context/index.js\";\n\nexport * from \"./hooks/index.js\";\n\nexport type { IDocumentDefinition } from \"./parser/index.js\";\nexport { DocumentType, operationName, parser } from \"./parser/index.js\";\n\nexport type {\n  PreloadQueryOptions,\n  PreloadQueryFetchPolicy,\n  PreloadQueryFunction,\n} from \"./query-preloader/createQueryPreloader.js\";\nexport { createQueryPreloader } from \"./query-preloader/createQueryPreloader.js\";\n\nexport type * from \"./types/types.js\";\n", "import \"../../utilities/globals/index.js\";\n\nexport type { ApolloConsumerProps } from \"./ApolloConsumer.js\";\nexport { ApolloConsumer } from \"./ApolloConsumer.js\";\nexport type { ApolloContextValue } from \"./ApolloContext.js\";\nexport { getApolloContext, resetApolloContext } from \"./ApolloContext.js\";\nexport type { ApolloProviderProps } from \"./ApolloProvider.js\";\nexport { ApolloProvider } from \"./ApolloProvider.js\";\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\n\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"./ApolloContext.js\";\n\nexport interface ApolloConsumerProps {\n  children: (client: ApolloClient<object>) => ReactTypes.ReactNode;\n}\n\nexport const ApolloConsumer: ReactTypes.FC<ApolloConsumerProps> = (props) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any) => {\n        invariant(\n          context && context.client,\n          'Could not find \"client\" in the context of ApolloConsumer. ' +\n            \"Wrap the root component in an <ApolloProvider>.\"\n        );\n        return props.children(context.client);\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n", "import * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport type { RenderPromises } from \"../ssr/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey =\n  canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\n\nexport function getApolloContext(): ReactTypes.Context<ApolloContextValue> {\n  invariant(\n    \"createContext\" in React,\n    \"Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n\" +\n      \"The Apollo Client functionality you are trying to use is only available in React Client Components.\\n\" +\n      'Please make sure to add \"use client\" at the top of your file.\\n' +\n      // TODO: change to React documentation once React documentation contains information about Client Components\n      \"For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n  );\n\n  let context = (React.createContext as any)[\n    contextKey\n  ] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: (context = React.createContext<ApolloContextValue>({})),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}\n\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport const resetApolloContext = getApolloContext;\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\n\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"./ApolloContext.js\";\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: ReactTypes.ReactNode | ReactTypes.ReactNode[] | null;\n}\n\nexport const ApolloProvider: ReactTypes.FC<ApolloProviderProps<any>> = ({\n  client,\n  children,\n}) => {\n  const ApolloContext = getApolloContext();\n  const parentContext = React.useContext(ApolloContext);\n\n  const context = React.useMemo(() => {\n    return {\n      ...parentContext,\n      client: client || parentContext.client,\n    };\n  }, [parentContext, client]);\n\n  invariant(\n    context.client,\n    \"ApolloProvider was not passed a client instance. Make \" +\n      'sure you pass in your client via the \"client\" prop.'\n  );\n\n  return (\n    <ApolloContext.Provider value={context}>{children}</ApolloContext.Provider>\n  );\n};\n", "import \"../../utilities/globals/index.js\";\n\nexport * from \"./useApolloClient.js\";\nexport * from \"./useLazyQuery.js\";\nexport * from \"./useMutation.js\";\nexport { useQuery } from \"./useQuery.js\";\nexport * from \"./useSubscription.js\";\nexport * from \"./useReactiveVar.js\";\nexport * from \"./useFragment.js\";\nexport type { UseSuspenseQueryResult } from \"./useSuspenseQuery.js\";\nexport { useSuspenseQuery } from \"./useSuspenseQuery.js\";\nexport type { UseBackgroundQueryResult } from \"./useBackgroundQuery.js\";\nexport { useBackgroundQuery } from \"./useBackgroundQuery.js\";\nexport type {\n  UseSuspenseFragmentResult,\n  UseSuspenseFragmentOptions,\n} from \"./useSuspenseFragment.js\";\nexport { useSuspenseFragment } from \"./useSuspenseFragment.js\";\nexport type {\n  LoadQueryFunction,\n  UseLoadableQueryResult,\n} from \"./useLoadableQuery.js\";\nexport { useLoadableQuery } from \"./useLoadableQuery.js\";\nexport type { UseQueryRefHandlersResult } from \"./useQueryRefHandlers.js\";\nexport { useQueryRefHandlers } from \"./useQueryRefHandlers.js\";\nexport type { UseReadQueryResult } from \"./useReadQuery.js\";\nexport { useReadQuery } from \"./useReadQuery.js\";\nexport { skipToken } from \"./constants.js\";\nexport type { SkipToken } from \"./constants.js\";\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */\nexport function useApolloClient(\n  override?: ApolloClient<object>\n): ApolloClient<object> {\n  const context = React.useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n      \"Wrap the root component in an <ApolloProvider>, or pass an ApolloClient \" +\n      \"instance in via options.\"\n  );\n\n  return client;\n}\n", "import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryHookOptions,\n  QueryResult,\n} from \"../types/types.js\";\nimport type { InternalResult } from \"./useQuery.js\";\nimport {\n  createMakeWatchQueryOptions,\n  getDefaultFetchPolicy,\n  getObsQueryOptions,\n  toQueryResult,\n  useQueryInternals,\n} from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"stopPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>(void 0);\n  const optionsRef =\n    React.useRef<LazyQueryHookOptions<TData, TVariables>>(void 0);\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >(void 0);\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const queryHookOptions = {\n    ...merged,\n    skip: !execOptionsRef.current,\n  };\n  const {\n    obsQueryFields,\n    result: useQueryResult,\n    client,\n    resultData,\n    observable,\n    onQueryExecuted,\n  } = useQueryInternals(document, queryHookOptions);\n\n  const initialFetchPolicy =\n    observable.options.initialFetchPolicy ||\n    getDefaultFetchPolicy(\n      queryHookOptions.defaultOptions,\n      client.defaultOptions\n    );\n\n  const forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = obsQueryFields[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods as typeof obsQueryFields;\n  }, [forceUpdateState, obsQueryFields]);\n\n  const called = !!execOptionsRef.current;\n  const result = React.useMemo(\n    () => ({\n      ...useQueryResult,\n      ...eagerMethods,\n      called,\n    }),\n    [useQueryResult, eagerMethods, called]\n  );\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = executeQuery(\n        resultData,\n        observable,\n        client,\n        document,\n        { ...options, skip: false },\n        onQueryExecuted\n      ).then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    [\n      client,\n      document,\n      eagerMethods,\n      initialFetchPolicy,\n      observable,\n      resultData,\n      onQueryExecuted,\n    ]\n  );\n\n  const executeRef = React.useRef(execute);\n  useIsomorphicLayoutEffect(() => {\n    executeRef.current = execute;\n  });\n\n  const stableExecute = React.useCallback<typeof execute>(\n    (...args) => executeRef.current(...args),\n    []\n  );\n  return [stableExecute, result];\n}\n\nfunction executeQuery<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  currentQuery: DocumentNode,\n  options: QueryHookOptions<TData, TVariables> & {\n    query?: DocumentNode;\n  },\n  onQueryExecuted: (options: WatchQueryOptions<TVariables, TData>) => void\n) {\n  const query = options.query || currentQuery;\n  const watchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    false\n  )(observable);\n\n  const concast = observable.reobserveAsConcast(\n    getObsQueryOptions(observable, client, options, watchQueryOptions)\n  );\n  onQueryExecuted(watchQueryOptions);\n\n  return new Promise<\n    Omit<QueryResult<TData, TVariables>, (typeof EAGER_METHODS)[number]>\n  >((resolve) => {\n    let result: ApolloQueryResult<TData>;\n\n    // Subscribe to the concast independently of the ObservableQuery in case\n    // the component gets unmounted before the promise resolves. This prevents\n    // the concast from terminating early and resolving with `undefined` when\n    // there are no more subscribers for the concast.\n    concast.subscribe({\n      next: (value) => {\n        result = value;\n      },\n      error: () => {\n        resolve(\n          toQueryResult(\n            observable.getCurrentResult(),\n            resultData.previousData,\n            observable,\n            client\n          )\n        );\n      },\n      complete: () => {\n        resolve(\n          toQueryResult(\n            observable[\"maskResult\"](result),\n            resultData.previousData,\n            observable,\n            client\n          )\n        );\n      },\n    });\n  });\n}\n", "/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n/** */\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  ApolloClient,\n  DefaultOptions,\n  OperationVariables,\n  WatchQueryFetchPolicy,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloQueryResult,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { RenderPromises } from \"../ssr/RenderPromises.js\";\nimport type { MaybeMasked } from \"../../masking/index.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\ntype InternalQueryResult<TData, TVariables extends OperationVariables> = Omit<\n  QueryResult<TData, TVariables>,\n  Exclude<keyof ObservableQueryFields<TData, TVariables>, \"variables\">\n>;\n\nfunction noop() {}\nconst lastWatchOptions = Symbol();\n\ninterface ObsQueryWithMeta<TData, TVariables extends OperationVariables>\n  extends ObservableQuery<TData, TVariables> {\n  [lastWatchOptions]?: WatchQueryOptions<TVariables, TData>;\n}\n\nexport interface InternalResult<TData, TVariables extends OperationVariables> {\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  current?: undefined | InternalQueryResult<TData, TVariables>;\n  previousData?: undefined | MaybeMasked<TData>;\n}\n\ninterface InternalState<TData, TVariables extends OperationVariables> {\n  client: ReturnType<typeof useApolloClient>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  observable: ObsQueryWithMeta<TData, TVariables>;\n  resultData: InternalResult<TData, TVariables>;\n}\n\nexport type UpdateInternalState<\n  TData,\n  TVariables extends OperationVariables,\n> = (state: InternalState<TData, TVariables>) => void;\n\ninterface Callbacks<TData> {\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  onCompleted(data: MaybeMasked<TData>): void;\n  onError(error: ApolloError): void;\n}\n\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return wrapHook(\n    \"useQuery\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useQuery_,\n    useApolloClient(options && options.client)\n  )(query, options);\n}\n\nfunction useQuery_<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const { result, obsQueryFields } = useQueryInternals(query, options);\n  return React.useMemo(\n    () => ({ ...result, ...obsQueryFields }),\n    [result, obsQueryFields]\n  );\n}\n\nfunction useInternalState<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<any, any>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  renderPromises: RenderPromises | undefined,\n  makeWatchQueryOptions: () => WatchQueryOptions<TVariables, TData>\n) {\n  function createInternalState(previous?: InternalState<TData, TVariables>) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    const internalState: InternalState<TData, TVariables> = {\n      client,\n      query,\n      observable:\n        // See if there is an existing observable that was used to fetch the same\n        // data and if so, use it instead since it will contain the proper queryId\n        // to fetch the result set. This is used during SSR.\n        (renderPromises &&\n          renderPromises.getSSRObservable(makeWatchQueryOptions())) ||\n        client.watchQuery(\n          getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())\n        ),\n      resultData: {\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        previousData: previous?.resultData.current?.data,\n      },\n    };\n\n    return internalState as InternalState<TData, TVariables>;\n  }\n\n  let [internalState, updateInternalState] =\n    React.useState(createInternalState);\n\n  /**\n   * Used by `useLazyQuery` when a new query is executed.\n   * We keep this logic here since it needs to update things in unsafe\n   * ways and here we at least can keep track of that in a single place.\n   */\n  function onQueryExecuted(\n    watchQueryOptions: WatchQueryOptions<TVariables, TData>\n  ) {\n    // this needs to be set to prevent an immediate `resubscribe` in the\n    // next rerender of the `useQuery` internals\n    Object.assign(internalState.observable, {\n      [lastWatchOptions]: watchQueryOptions,\n    });\n    const resultData = internalState.resultData;\n    updateInternalState({\n      ...internalState,\n      // might be a different query\n      query: watchQueryOptions.query,\n      resultData: Object.assign(resultData, {\n        // We need to modify the previous `resultData` object as we rely on the\n        // object reference in other places\n        previousData: resultData.current?.data || resultData.previousData,\n        current: undefined,\n      }),\n    });\n  }\n\n  if (client !== internalState.client || query !== internalState.query) {\n    // If the client or query have changed, we need to create a new InternalState.\n    // This will trigger a re-render with the new state, but it will also continue\n    // to run the current render function to completion.\n    // Since we sometimes trigger some side-effects in the render function, we\n    // re-assign `state` to the new state to ensure that those side-effects are\n    // triggered with the new state.\n    const newInternalState = createInternalState(internalState);\n    updateInternalState(newInternalState);\n    return [newInternalState, onQueryExecuted] as const;\n  }\n\n  return [internalState, onQueryExecuted] as const;\n}\n\nexport function useQueryInternals<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const client = useApolloClient(options.client);\n\n  const renderPromises = React.useContext(getApolloContext()).renderPromises;\n  const isSyncSSR = !!renderPromises;\n  const disableNetworkFetches = client.disableNetworkFetches;\n  const ssrAllowed = options.ssr !== false && !options.skip;\n  const partialRefetch = options.partialRefetch;\n\n  const makeWatchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    isSyncSSR\n  );\n\n  const [{ observable, resultData }, onQueryExecuted] = useInternalState(\n    client,\n    query,\n    options,\n    renderPromises,\n    makeWatchQueryOptions\n  );\n\n  const watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>> =\n    makeWatchQueryOptions(observable);\n\n  useResubscribeIfNecessary<TData, TVariables>(\n    resultData, // might get mutated during render\n    observable, // might get mutated during render\n    client,\n    options,\n    watchQueryOptions\n  );\n\n  const obsQueryFields = React.useMemo(\n    () => bindObservableMethods(observable),\n    [observable]\n  );\n\n  useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n\n  const result = useObservableSubscriptionResult<TData, TVariables>(\n    resultData,\n    observable,\n    client,\n    options,\n    watchQueryOptions,\n    disableNetworkFetches,\n    partialRefetch,\n    isSyncSSR,\n    {\n      onCompleted: options.onCompleted || noop,\n      onError: options.onError || noop,\n    }\n  );\n\n  return {\n    result,\n    obsQueryFields,\n    observable,\n    resultData,\n    client,\n    onQueryExecuted,\n  };\n}\n\nfunction useObservableSubscriptionResult<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>,\n  disableNetworkFetches: boolean,\n  partialRefetch: boolean | undefined,\n  isSyncSSR: boolean,\n  callbacks: {\n    onCompleted: (data: MaybeMasked<TData>) => void;\n    onError: (error: ApolloError) => void;\n  }\n) {\n  const callbackRef = React.useRef<Callbacks<TData>>(callbacks);\n  React.useEffect(() => {\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    // eslint-disable-next-line react-compiler/react-compiler\n    callbackRef.current = callbacks;\n  });\n\n  const resultOverride =\n    (\n      (isSyncSSR || disableNetworkFetches) &&\n      options.ssr === false &&\n      !options.skip\n    ) ?\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      ssrDisabledResult\n    : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ?\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      skipStandbyResult\n    : void 0;\n\n  const previousData = resultData.previousData;\n  const currentResultOverride = React.useMemo(\n    () =>\n      resultOverride &&\n      toQueryResult(resultOverride, previousData, observable, client),\n    [client, observable, resultOverride, previousData]\n  );\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (handleStoreChange) => {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n\n        if (isSyncSSR) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = resultData.current;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = observable.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          setResult(\n            result,\n            resultData,\n            observable,\n            client,\n            partialRefetch,\n            handleStoreChange,\n            callbackRef.current\n          );\n        };\n\n        const onError = (error: Error) => {\n          subscription.current.unsubscribe();\n          subscription.current = observable.resubscribeAfterError(\n            onNext,\n            onError\n          );\n\n          if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = resultData.current;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            setResult(\n              {\n                data: (previousResult &&\n                  previousResult.data) as MaybeMasked<TData>,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              },\n              resultData,\n              observable,\n              client,\n              partialRefetch,\n              handleStoreChange,\n              callbackRef.current\n            );\n          }\n        };\n\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        const subscription = { current: observable.subscribe(onNext, onError) };\n\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return () => {\n          setTimeout(() => subscription.current.unsubscribe());\n        };\n      },\n\n      [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client,\n      ]\n    ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      )\n  );\n}\n\nfunction useRegisterSSRObservable(\n  observable: ObsQueryWithMeta<any, any>,\n  renderPromises: RenderPromises | undefined,\n  ssrAllowed: boolean\n) {\n  if (renderPromises && ssrAllowed) {\n    renderPromises.registerSSRObservable(observable);\n\n    if (observable.getCurrentResult().loading) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      renderPromises.addObservableQueryPromise(observable);\n    }\n  }\n}\n\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  /** this hook will mutate properties on `resultData` */\n  resultData: InternalResult<TData, TVariables>,\n  /** this hook will mutate properties on `observable` */\n  observable: ObsQueryWithMeta<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>\n) {\n  if (\n    observable[lastWatchOptions] &&\n    !equal(observable[lastWatchOptions], watchQueryOptions)\n  ) {\n    // Though it might be tempting to postpone this reobserve call to the\n    // useEffect block, we need getCurrentResult to return an appropriate\n    // loading:true result synchronously (later within the same call to\n    // useQuery). Since we already have this.observable here (not true for\n    // the very first call to useQuery), we are not initiating any new\n    // subscriptions, though it does feel less than ideal that reobserve\n    // (potentially) kicks off a network request (for example, when the\n    // variables have changed), which is technically a side-effect.\n    observable.reobserve(\n      getObsQueryOptions(observable, client, options, watchQueryOptions)\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    resultData.previousData =\n      resultData.current?.data || resultData.previousData;\n    resultData.current = void 0;\n  }\n  observable[lastWatchOptions] = watchQueryOptions;\n}\n\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\nexport function createMakeWatchQueryOptions<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {},\n  isSyncSSR: boolean\n) {\n  return (\n    observable?: ObservableQuery<TData, TVariables>\n  ): WatchQueryOptions<TVariables, TData> => {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query });\n\n    if (\n      isSyncSSR &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      watchQueryOptions.initialFetchPolicy =\n        watchQueryOptions.initialFetchPolicy ||\n        watchQueryOptions.fetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n      watchQueryOptions.fetchPolicy = \"standby\";\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        observable?.options.initialFetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n    }\n\n    return watchQueryOptions;\n  };\n}\n\nexport function getObsQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  observable: ObservableQuery<TData, TVariables> | undefined,\n  client: ApolloClient<object>,\n  queryHookOptions: QueryHookOptions<TData, TVariables>,\n  watchQueryOptions: Partial<WatchQueryOptions<TVariables, TData>>\n): WatchQueryOptions<TVariables, TData> {\n  const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n  const globalDefaults = client.defaultOptions.watchQuery;\n  if (globalDefaults) toMerge.push(globalDefaults);\n\n  if (queryHookOptions.defaultOptions) {\n    toMerge.push(queryHookOptions.defaultOptions);\n  }\n\n  // We use compact rather than mergeOptions for this part of the merge,\n  // because we want watchQueryOptions.variables (if defined) to replace\n  // this.observable.options.variables whole. This replacement allows\n  // removing variables by removing them from the variables input to\n  // useQuery. If the variables were always merged together (rather than\n  // replaced), there would be no way to remove existing variables.\n  // However, the variables from options.defaultOptions and globalDefaults\n  // (if provided) should be merged, to ensure individual defaulted\n  // variables always have values, if not otherwise defined in\n  // observable.options or watchQueryOptions.\n  toMerge.push(compact(observable && observable.options, watchQueryOptions));\n\n  return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n}\n\nfunction setResult<TData, TVariables extends OperationVariables>(\n  nextResult: ApolloQueryResult<MaybeMasked<TData>>,\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  partialRefetch: boolean | undefined,\n  forceUpdate: () => void,\n  callbacks: Callbacks<TData>\n) {\n  const previousResult = resultData.current;\n  if (previousResult && previousResult.data) {\n    resultData.previousData = previousResult.data;\n  }\n\n  if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    nextResult.error = new ApolloError({ graphQLErrors: nextResult.errors });\n  }\n\n  resultData.current = toQueryResult(\n    unsafeHandlePartialRefetch(nextResult, observable, partialRefetch),\n    resultData.previousData,\n    observable,\n    client\n  );\n  // Calling state.setResult always triggers an update, though some call sites\n  // perform additional equality checks before committing to an update.\n  forceUpdate();\n  handleErrorOrCompleted(nextResult, previousResult?.networkStatus, callbacks);\n}\n\nfunction handleErrorOrCompleted<TData>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  previousNetworkStatus: NetworkStatus | undefined,\n  callbacks: Callbacks<TData>\n) {\n  if (!result.loading) {\n    const error = toApolloError(result);\n\n    // wait a tick in case we are in the middle of rendering a component\n    Promise.resolve()\n      .then(() => {\n        if (error) {\n          callbacks.onError(error);\n        } else if (\n          result.data &&\n          previousNetworkStatus !== result.networkStatus &&\n          result.networkStatus === NetworkStatus.ready\n        ) {\n          callbacks.onCompleted(result.data);\n        }\n      })\n      .catch((error) => {\n        invariant.warn(error);\n      });\n  }\n}\n\nfunction getCurrentResult<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  callbacks: Callbacks<TData>,\n  partialRefetch: boolean | undefined,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  // Using this.result as a cache ensures getCurrentResult continues returning\n  // the same (===) result object, unless state.setResult has been called, or\n  // we're doing server rendering and therefore override the result below.\n  if (!resultData.current) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    // this could call unsafeHandlePartialRefetch\n    setResult(\n      observable.getCurrentResult(),\n      resultData,\n      observable,\n      client,\n      partialRefetch,\n      () => {},\n      callbacks\n    );\n  }\n  return resultData.current!;\n}\n\nexport function getDefaultFetchPolicy<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  queryHookDefaultOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n  clientDefaultOptions?: DefaultOptions\n): WatchQueryFetchPolicy {\n  return (\n    queryHookDefaultOptions?.fetchPolicy ||\n    clientDefaultOptions?.watchQuery?.fetchPolicy ||\n    \"cache-first\"\n  );\n}\n\nexport function toApolloError<TData>(\n  result: Pick<ApolloQueryResult<TData>, \"errors\" | \"error\">\n): ApolloError | undefined {\n  return isNonEmptyArray(result.errors) ?\n      new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\nexport function toQueryResult<TData, TVariables extends OperationVariables>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  previousData: MaybeMasked<TData> | undefined,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  const { data, partial, ...resultWithoutPartial } = result;\n  const queryResult: InternalQueryResult<TData, TVariables> = {\n    data, // Ensure always defined, even if result.data is missing.\n    ...resultWithoutPartial,\n    client: client,\n    observable: observable,\n    variables: observable.variables,\n    called: result !== ssrDisabledResult && result !== skipStandbyResult,\n    previousData,\n  };\n  return queryResult;\n}\n\nfunction unsafeHandlePartialRefetch<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  observable: ObservableQuery<TData, TVariables>,\n  partialRefetch: boolean | undefined\n): ApolloQueryResult<MaybeMasked<TData>> {\n  // TODO: This code should be removed when the partialRefetch option is\n  // removed. I was unable to get this hook to behave reasonably in certain\n  // edge cases when this block was put in an effect.\n  if (\n    result.partial &&\n    partialRefetch &&\n    !result.loading &&\n    (!result.data || Object.keys(result.data).length === 0) &&\n    observable.options.fetchPolicy !== \"cache-only\"\n  ) {\n    observable.refetch();\n    return {\n      ...result,\n      loading: true,\n      networkStatus: NetworkStatus.refetch,\n    };\n  }\n  return result;\n}\n\nconst ssrDisabledResult = maybeDeepFreeze({\n  loading: true,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.loading,\n});\n\nconst skipStandbyResult = maybeDeepFreeze({\n  loading: false,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.ready,\n});\n\nfunction bindObservableMethods<TData, TVariables extends OperationVariables>(\n  observable: ObservableQuery<TData, TVariables>\n): Omit<ObservableQueryFields<TData, TVariables>, \"variables\"> {\n  return {\n    refetch: observable.refetch.bind(observable),\n    reobserve: observable.reobserve.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable),\n  };\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\n\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType =\n  realHook ||\n  ((subscribe, getSnapshot, getServerSnapshot) => {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    const value = getSnapshot();\n    if (\n      // DEVIATION: Using __DEV__\n      __DEV__ &&\n      !didWarnUncachedGetSnapshot &&\n      // DEVIATION: Not using Object.is because we know our snapshots will never\n      // be exotic primitive values like NaN, which is !== itself.\n      value !== getSnapshot()\n    ) {\n      didWarnUncachedGetSnapshot = true;\n      // DEVIATION: Using invariant.error instead of console.error directly.\n      invariant.error(\n        \"The result of getSnapshot should be cached to avoid an infinite loop\"\n      );\n    }\n\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    const [{ inst }, forceUpdate] = React.useState({\n      inst: { value, getSnapshot },\n    });\n\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (canUseLayoutEffect) {\n      // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n      // which may seem like a conditional hook, but this code ends up behaving\n      // unconditionally (one way or the other) because canUseLayoutEffect is\n      // constant.\n      React.useLayoutEffect(() => {\n        Object.assign(inst, { value, getSnapshot });\n        // Whenever getSnapshot or subscribe changes, we need to check in the\n        // commit phase if there was an interleaved mutation. In concurrent mode\n        // this can happen all the time, but even in synchronous mode, an earlier\n        // effect may have mutated the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [subscribe, value, getSnapshot]);\n    } else {\n      Object.assign(inst, { value, getSnapshot });\n    }\n\n    React.useEffect(() => {\n      // Check for changes right before subscribing. Subsequent changes will be\n      // detected in the subscription handler.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n\n      // Subscribe to the store and return a clean-up function.\n      return subscribe(function handleStoreChange() {\n        // TODO: Because there is no cross-renderer API for batching updates, it's\n        // up to the consumer of this library to wrap their subscription event\n        // with unstable_batchedUpdates. Should we try to detect when this isn't\n        // the case and print a warning in development?\n\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n      });\n      // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [subscribe]);\n\n    return value;\n  });\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nlet cache:\n  | undefined\n  | AutoCleanedWeakCache<\n      DocumentNode,\n      {\n        name: string;\n        type: DocumentType;\n        variables: readonly VariableDefinitionNode[];\n      }\n    >;\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(\n      cacheSizes.parser || defaultCacheSizes.parser\n    );\n  }\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = () => {\n  cache = undefined;\n};\n\nif (__DEV__) {\n  registerGlobalCache(\"parser\", () => (cache ? cache.size : 0));\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n", "import type { DependencyList } from \"react\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\n\nexport function useDeepMemo<TValue>(\n  memoFn: () => TValue,\n  deps: DependencyList\n) {\n  const ref = React.useRef<{ deps: DependencyList; value: TValue }>(void 0);\n\n  if (!ref.current || !equal(ref.current.deps, deps)) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    ref.current = { value: memoFn(), deps };\n  }\n\n  return ref.current.value;\n}\n", "import * as React from \"rehackt\";\nimport { canUseDOM } from \"../../../utilities/index.js\";\n\n// use canUseDOM here instead of canUseLayoutEffect because we want to be able\n// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine\n// in useSuspenseQuery tests, but to honor the original comment about the\n// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left\n// alone.\nexport const useIsomorphicLayoutEffect =\n  canUseDOM ? React.useLayoutEffect : React.useEffect;\n", "import * as React from \"rehackt\";\n\nlet Ctx: React.Context<null>;\n\nfunction noop() {}\nexport function useRenderGuard() {\n  if (!Ctx) {\n    // we want the intialization to be lazy because `createContext` would error on import in a RSC\n    Ctx = React.createContext(null);\n  }\n\n  return React.useCallback(\n    /**\n     * @returns true if the hook was called during render\n     */ () => {\n      const orig = console.error;\n      try {\n        console.error = noop;\n\n        /**\n         * `useContext` can be called conditionally during render, so this is safe.\n         * (Also, during render we would want to throw as a reaction to this anyways, so it\n         * wouldn't even matter if we got the order of hooks mixed up...)\n         *\n         * They cannot however be called outside of Render, and that's what we're testing here.\n         *\n         * Different versions of React have different behaviour on an invalid hook call:\n         *\n         * React 16.8 - 17: throws an error\n         * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n         *\n         * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n         * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n         */\n        React[\"useContext\" /* hide this from the linter */](Ctx);\n        return true;\n      } catch (e) {\n        return false;\n      } finally {\n        console.error = orig;\n      }\n    },\n    []\n  );\n}\n", "import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"rehackt\";\n\ntype Use = <T>(promise: Promise<T>) => T;\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nconst useKey = \"use\" as keyof typeof React;\nconst realHook = React[useKey] as Use | undefined;\n\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nexport const __use =\n  realHook ||\n  function __use<TValue>(promise: Promise<TValue>) {\n    const statefulPromise = wrapPromiseWithState(promise);\n\n    switch (statefulPromise.status) {\n      case \"pending\":\n        throw statefulPromise;\n      case \"rejected\":\n        throw statefulPromise.reason;\n      case \"fulfilled\":\n        return statefulPromise.value;\n    }\n  };\n", "import type {\n  useQuery,\n  useSuspenseQuery,\n  useBackgroundQuery,\n  useReadQuery,\n  useFragment,\n  useQueryRefHandlers,\n  useSuspenseFragment,\n} from \"../index.js\";\nimport type { QueryManager } from \"../../../core/QueryManager.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\nimport type { ObservableQuery } from \"../../../core/ObservableQuery.js\";\nimport type { createQueryPreloader } from \"../../query-preloader/createQueryPreloader.js\";\n\nconst wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n\ninterface WrappableHooks {\n  createQueryPreloader: typeof createQueryPreloader;\n  useQuery: typeof useQuery;\n  useSuspenseQuery: typeof useSuspenseQuery;\n  useSuspenseFragment: typeof useSuspenseFragment;\n  useBackgroundQuery: typeof useBackgroundQuery;\n  useReadQuery: typeof useReadQuery;\n  useFragment: typeof useFragment;\n  useQueryRefHandlers: typeof useQueryRefHandlers;\n}\n\n/**\n * @internal\n * Can be used to correctly type the [Symbol.for(\"apollo.hook.wrappers\")] property of\n * `QueryManager`, to override/wrap hook functionality.\n */\nexport type HookWrappers = {\n  [K in keyof WrappableHooks]?: (\n    originalHook: WrappableHooks[K]\n  ) => WrappableHooks[K];\n};\n\ninterface QueryManagerWithWrappers<T> extends QueryManager<T> {\n  [wrapperSymbol]?: HookWrappers;\n}\n\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */\nexport function wrapHook<Hook extends (...args: any[]) => any>(\n  hookName: keyof WrappableHooks,\n  useHook: Hook,\n  clientOrObsQuery: ObservableQuery<any> | ApolloClient<any>\n): Hook {\n  const queryManager = (\n    clientOrObsQuery as unknown as {\n      // both `ApolloClient` and `ObservableQuery` have a `queryManager` property\n      // but they're both `private`, so we have to cast around for a bit here.\n      queryManager: QueryManagerWithWrappers<any>;\n    }\n  )[\"queryManager\"];\n  const wrappers = queryManager && queryManager[wrapperSymbol];\n  const wrapper: undefined | ((wrap: Hook) => Hook) =\n    wrappers && (wrappers[hookName] as any);\n  return wrapper ? wrapper(useHook) : useHook;\n}\n", "import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then(\n          (response) => {\n            const { data, errors } = response;\n            const error =\n              errors && errors.length > 0 ?\n                new ApolloError({ graphQLErrors: errors })\n              : void 0;\n\n            const onError =\n              executeOptions.onError || ref.current.options?.onError;\n\n            if (error && onError) {\n              onError(\n                error,\n                clientOptions as MutationOptions<TData, OperationVariables>\n              );\n            }\n\n            if (\n              mutationId === ref.current.mutationId &&\n              !clientOptions.ignoreResults\n            ) {\n              const result = {\n                called: true,\n                loading: false,\n                data,\n                error,\n                client,\n              };\n\n              if (ref.current.isMounted && !equal(ref.current.result, result)) {\n                setResult((ref.current.result = result));\n              }\n            }\n\n            const onCompleted =\n              executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n            if (!error) {\n              onCompleted?.(\n                response.data!,\n                clientOptions as MutationOptions<TData, OperationVariables>\n              );\n            }\n\n            return response;\n          },\n          (error) => {\n            if (\n              mutationId === ref.current.mutationId &&\n              ref.current.isMounted\n            ) {\n              const result = {\n                loading: false,\n                error,\n                data: void 0,\n                called: true,\n                client,\n              };\n\n              if (!equal(ref.current.result, result)) {\n                setResult((ref.current.result = result));\n              }\n            }\n\n            const onError =\n              executeOptions.onError || ref.current.options?.onError;\n\n            if (onError) {\n              onError(\n                error,\n                clientOptions as MutationOptions<TData, OperationVariables>\n              );\n\n              // TODO(brian): why are we returning this here???\n              return { data: void 0, errors: error };\n            }\n\n            throw error;\n          }\n        );\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    // eslint-disable-next-line react-compiler/react-compiler\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n", "import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  NoInfer,\n  SubscriptionHookOptions,\n  SubscriptionResult,\n} from \"../types/types.js\";\nimport type {\n  ApolloClient,\n  DefaultContext,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchResult,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\nimport type { MaybeMasked } from \"../../masking/index.js\";\n\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SubscriptionHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n) {\n  const hasIssuedDeprecationWarningRef = React.useRef(false);\n  const client = useApolloClient(options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options.onSubscriptionData) {\n      invariant.warn(\n        options.onData ?\n          \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n        : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete ?\n          \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n        : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const {\n    skip,\n    fetchPolicy,\n    errorPolicy,\n    shouldResubscribe,\n    context,\n    extensions,\n    ignoreResults,\n  } = options;\n  const variables = useDeepMemo(() => options.variables, [options.variables]);\n\n  const recreate = () =>\n    createSubscription(\n      client,\n      subscription,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      context,\n      extensions\n    );\n\n  let [observable, setObservable] = React.useState(\n    options.skip ? null : recreate\n  );\n\n  const recreateRef = React.useRef(recreate);\n  useIsomorphicLayoutEffect(() => {\n    recreateRef.current = recreate;\n  });\n\n  if (skip) {\n    if (observable) {\n      setObservable((observable = null));\n    }\n  } else if (\n    !observable ||\n    ((client !== observable.__.client ||\n      subscription !== observable.__.query ||\n      fetchPolicy !== observable.__.fetchPolicy ||\n      errorPolicy !== observable.__.errorPolicy ||\n      !equal(variables, observable.__.variables)) &&\n      (typeof shouldResubscribe === \"function\" ?\n        !!shouldResubscribe(options!)\n      : shouldResubscribe) !== false)\n  ) {\n    setObservable((observable = recreate()));\n  }\n\n  const optionsRef = React.useRef(options);\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n\n  const fallbackLoading = !skip && !ignoreResults;\n  const fallbackResult = React.useMemo<SubscriptionResult<TData, TVariables>>(\n    () => ({\n      loading: fallbackLoading,\n      error: void 0,\n      data: void 0,\n      variables,\n    }),\n    [fallbackLoading, variables]\n  );\n\n  const ignoreResultsRef = React.useRef(ignoreResults);\n  useIsomorphicLayoutEffect(() => {\n    // We cannot reference `ignoreResults` directly in the effect below\n    // it would add a dependency to the `useEffect` deps array, which means the\n    // subscription would be recreated if `ignoreResults` changes\n    // As a result, on resubscription, the last result would be re-delivered,\n    // rendering the component one additional time, and re-triggering `onData`.\n    // The same applies to `fetchPolicy`, which results in a new `observable`\n    // being created. We cannot really avoid it in that case, but we can at least\n    // avoid it for `ignoreResults`.\n    ignoreResultsRef.current = ignoreResults;\n  });\n\n  const ret = useSyncExternalStore<SubscriptionResult<TData, TVariables>>(\n    React.useCallback(\n      (update) => {\n        if (!observable) {\n          return () => {};\n        }\n\n        let subscriptionStopped = false;\n        const variables = observable.__.variables;\n        const client = observable.__.client;\n        const subscription = observable.subscribe({\n          next(fetchResult) {\n            if (subscriptionStopped) {\n              return;\n            }\n\n            const result = {\n              loading: false,\n              // TODO: fetchResult.data can be null but SubscriptionResult.data\n              // expects TData | undefined only\n              data: fetchResult.data!,\n              error: toApolloError(fetchResult),\n              variables,\n            };\n            observable.__.setResult(result);\n            if (!ignoreResultsRef.current) update();\n\n            if (result.error) {\n              optionsRef.current.onError?.(result.error);\n            } else if (optionsRef.current.onData) {\n              optionsRef.current.onData({\n                client,\n                data: result,\n              });\n            } else if (optionsRef.current.onSubscriptionData) {\n              optionsRef.current.onSubscriptionData({\n                client,\n                subscriptionData: result,\n              });\n            }\n          },\n          error(error) {\n            error =\n              error instanceof ApolloError ? error : (\n                new ApolloError({ protocolErrors: [error] })\n              );\n            if (!subscriptionStopped) {\n              observable.__.setResult({\n                loading: false,\n                data: void 0,\n                error,\n                variables,\n              });\n              if (!ignoreResultsRef.current) update();\n              optionsRef.current.onError?.(error);\n            }\n          },\n          complete() {\n            if (!subscriptionStopped) {\n              if (optionsRef.current.onComplete) {\n                optionsRef.current.onComplete();\n              } else if (optionsRef.current.onSubscriptionComplete) {\n                optionsRef.current.onSubscriptionComplete();\n              }\n            }\n          },\n        });\n\n        return () => {\n          // immediately stop receiving subscription values, but do not unsubscribe\n          // until after a short delay in case another useSubscription hook is\n          // reusing the same underlying observable and is about to subscribe\n          subscriptionStopped = true;\n          setTimeout(() => {\n            subscription.unsubscribe();\n          });\n        };\n      },\n      [observable]\n    ),\n    () =>\n      observable && !skip && !ignoreResults ?\n        observable.__.result\n      : fallbackResult,\n    () => fallbackResult\n  );\n\n  const restart = React.useCallback(() => {\n    invariant(\n      !optionsRef.current.skip,\n      \"A subscription that is skipped cannot be restarted.\"\n    );\n    setObservable(recreateRef.current());\n  }, [optionsRef, recreateRef]);\n\n  return React.useMemo(() => ({ ...ret, restart }), [ret, restart]);\n}\n\nfunction createSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<any>,\n  query: TypedDocumentNode<TData, TVariables>,\n  variables: TVariables | undefined,\n  fetchPolicy: FetchPolicy | undefined,\n  errorPolicy: ErrorPolicy | undefined,\n  context: DefaultContext | undefined,\n  extensions: Record<string, any> | undefined\n) {\n  const options = {\n    query,\n    variables,\n    fetchPolicy,\n    errorPolicy,\n    context,\n    extensions,\n  };\n  const __ = {\n    ...options,\n    client,\n    result: {\n      loading: true,\n      data: void 0,\n      error: void 0,\n      variables,\n    } as SubscriptionResult<TData, TVariables>,\n    setResult(result: SubscriptionResult<TData, TVariables>) {\n      __.result = result;\n    },\n  };\n\n  let observable: Observable<FetchResult<MaybeMasked<TData>>> | null = null;\n  return Object.assign(\n    new Observable<FetchResult<MaybeMasked<TData>>>((observer) => {\n      // lazily start the subscription when the first observer subscribes\n      // to get around strict mode\n      if (!observable) {\n        observable = client.subscribe(options);\n      }\n      const sub = observable.subscribe(observer);\n      return () => sub.unsubscribe();\n    }),\n    {\n      /**\n       * A tracking object to store details about the observable and the latest result of the subscription.\n       */\n      __,\n    }\n  );\n}\n", "import * as React from \"rehackt\";\nimport type { ReactiveVar } from \"../../core/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\n/**\n * Reads the value of a [reactive variable](https://www.apollographql.com/docs/react/local-state/reactive-variables/) and re-renders the containing component whenever that variable's value changes. This enables a reactive variable to trigger changes _without_ relying on the `useQuery` hook.\n *\n * @example\n * ```jsx\n * import { makeVar, useReactiveVar } from \"@apollo/client\";\n * export const cartItemsVar = makeVar([]);\n *\n * export function Cart() {\n *   const cartItems = useReactiveVar(cartItemsVar);\n *   // ...\n * }\n * ```\n * @since 3.2.0\n * @param rv - A reactive variable.\n * @returns The current value of the reactive variable.\n */\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  return useSyncExternalStore(\n    React.useCallback(\n      (update) => {\n        // By reusing the same onNext function in the nested call to\n        // rv.onNextChange(onNext), we can keep using the initial clean-up function\n        // returned by rv.onNextChange(function onNext(v){...}), without having to\n        // register the new clean-up function (returned by the nested\n        // rv.onNextChange(onNext)) with yet another callback.\n        return rv.onNextChange(function onNext() {\n          update();\n          rv.onNextChange(onNext);\n        });\n      },\n      [rv]\n    ),\n    rv,\n    rv\n  );\n}\n", "import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nimport type { FragmentType, MaybeMasked } from \"../../masking/index.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | FragmentType<NoInfer<TData>> | string | null;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: MaybeMasked<TData>;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<MaybeMasked<TData>>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useFragment_,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction useFragment_<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const client = useApolloClient(options.client);\n  const { cache } = client;\n  const { from, ...rest } = options;\n\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  );\n\n  const stableOptions = useDeepMemo(() => ({ ...rest, from: id! }), [rest, id]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const diff = React.useMemo(() => {\n    const { fragment, fragmentName, from, optimistic = true } = stableOptions;\n\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {} as TData,\n          complete: false,\n        }),\n      };\n    }\n\n    const { cache } = client;\n    const diff = cache.diff<TData>({\n      ...stableOptions,\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic,\n    });\n\n    return {\n      result: diffToResult({\n        ...diff,\n        result: client[\"queryManager\"].maskFragment({\n          fragment,\n          fragmentName,\n          data: diff.result,\n        }),\n      }),\n    };\n  }, [client, stableOptions]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => diff.result, [diff]);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n\n        const subscription =\n          stableOptions.from === null ?\n            null\n          : client.watchFragment(stableOptions).subscribe({\n              next: (result) => {\n                // Since `next` is called async by zen-observable, we want to avoid\n                // unnecessarily rerendering this hook for the initial result\n                // emitted from watchFragment which should be equal to\n                // `diff.result`.\n                if (equal(result, diff.result)) return;\n                diff.result = result;\n                // If we get another update before we've re-rendered, bail out of\n                // the update and try again. This ensures that the relative timing\n                // between useQuery and useFragment stays roughly the same as\n                // fixed in https://github.com/apollographql/apollo-client/pull/11083\n                clearTimeout(lastTimeout);\n                lastTimeout = setTimeout(forceUpdate) as any;\n              },\n            });\n        return () => {\n          subscription?.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [client, stableOptions, diff]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n", "import * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n  FetchMoreQueryOptions,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport type { SubscribeToMoreFunction } from \"../../core/watchQueryOptions.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  SuspenseQueryHookOptions,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nimport type { SkipToken } from \"./constants.js\";\nimport type { CacheKey, QueryKey } from \"../internal/index.js\";\nimport type { MaybeMasked, Unmasked } from \"../../masking/index.js\";\n\nexport interface UseSuspenseQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  client: ApolloClient<any>;\n  data: MaybeMasked<TData>;\n  error: ApolloError | undefined;\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  networkStatus: NetworkStatus;\n  refetch: RefetchFunction<TData, TVariables>;\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\nexport type FetchMoreFunction<TData, TVariables extends OperationVariables> = (\n  fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> & {\n    updateQuery?: (\n      previousQueryResult: Unmasked<TData>,\n      options: {\n        fetchMoreResult: Unmasked<TData>;\n        variables: TVariables;\n      }\n    ) => Unmasked<TData>;\n  }\n) => Promise<ApolloQueryResult<MaybeMasked<TData>>>;\n\nexport type RefetchFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"refetch\"];\n\nexport function useSuspenseQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<SuspenseQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> &\n    TOptions\n): UseSuspenseQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n    TOptions[\"returnPartialData\"] extends true ?\n      DeepPartial<TData> | undefined\n    : TData | undefined\n  : TOptions[\"returnPartialData\"] extends true ?\n    TOptions[\"skip\"] extends boolean ?\n      DeepPartial<TData> | undefined\n    : DeepPartial<TData>\n  : TOptions[\"skip\"] extends boolean ? TData | undefined\n  : TData,\n  TVariables\n>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData>, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n        returnPartialData: true;\n      })\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?:\n    | SkipToken\n    | SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken & Partial<SuspenseQueryHookOptions<TData, TVariables>>)\n    | SuspenseQueryHookOptions<TData, TVariables> = Object.create(null)\n): UseSuspenseQueryResult<TData | undefined, TVariables> {\n  return wrapHook(\n    \"useSuspenseQuery\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useSuspenseQuery_,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(query, options);\n}\n\nfunction useSuspenseQuery_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken & Partial<SuspenseQueryHookOptions<TData, TVariables>>)\n    | SuspenseQueryHookOptions<TData, TVariables>\n): UseSuspenseQueryResult<TData | undefined, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions<any, any>({\n    client,\n    query,\n    options,\n  });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions)\n  );\n\n  let [current, setPromise] = React.useState<\n    [QueryKey, Promise<ApolloQueryResult<any>>]\n  >([queryRef.key, queryRef.promise]);\n\n  // This saves us a re-execution of the render function when a variable changed.\n  if (current[0] !== queryRef.key) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    current[0] = queryRef.key;\n    current[1] = queryRef.promise;\n  }\n  let promise = current[1];\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n  }\n\n  React.useEffect(() => {\n    const dispose = queryRef.retain();\n\n    const removeListener = queryRef.listen((promise) => {\n      setPromise([queryRef.key, promise]);\n    });\n\n    return () => {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n\n  const skipResult = React.useMemo(() => {\n    const error = toApolloError(queryRef.result);\n\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error,\n    };\n  }, [queryRef.result]);\n\n  const result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n\n  const fetchMore = React.useCallback<\n    FetchMoreFunction<unknown, OperationVariables>\n  >(\n    (options) => {\n      const promise = queryRef.fetchMore(options);\n      setPromise([queryRef.key, queryRef.promise]);\n\n      return promise;\n    },\n    [queryRef]\n  ) as FetchMoreFunction<TData | undefined, TVariables>;\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n      setPromise([queryRef.key, queryRef.promise]);\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n  const subscribeToMore = queryRef.observable\n    .subscribeToMore as SubscribeToMoreFunction<TData | undefined, TVariables>;\n\n  return React.useMemo<\n    UseSuspenseQueryResult<TData | undefined, TVariables>\n  >(() => {\n    return {\n      client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore,\n      refetch,\n      subscribeToMore,\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\n\nfunction validateOptions(options: WatchQueryOptions) {\n  const { query, fetchPolicy, returnPartialData } = options;\n\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\n\nfunction validateFetchPolicy(\n  fetchPolicy: WatchQueryFetchPolicy = \"cache-first\"\n) {\n  const supportedFetchPolicies: WatchQueryFetchPolicy[] = [\n    \"cache-first\",\n    \"network-only\",\n    \"no-cache\",\n    \"cache-and-network\",\n  ];\n\n  invariant(\n    supportedFetchPolicies.includes(fetchPolicy),\n    `The fetch policy \\`%s\\` is not supported with suspense.`,\n    fetchPolicy\n  );\n}\n\nfunction validatePartialDataReturn(\n  fetchPolicy: WatchQueryFetchPolicy | undefined,\n  returnPartialData: boolean | undefined\n) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    invariant.warn(\n      \"Using `returnPartialData` with a `no-cache` fetch policy has no effect. To read partial data from the cache, consider using an alternate fetch policy.\"\n    );\n  }\n}\n\nexport function toApolloError(result: ApolloQueryResult<any>) {\n  return isNonEmptyArray(result.errors) ?\n      new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\ninterface UseWatchQueryOptionsHookOptions<\n  TData,\n  TVariables extends OperationVariables,\n> {\n  client: ApolloClient<unknown>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  options: SkipToken | SuspenseQueryHookOptions<TData, TVariables>;\n}\n\nexport function useWatchQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>({\n  client,\n  query,\n  options,\n}: UseWatchQueryOptionsHookOptions<TData, TVariables>): WatchQueryOptions<\n  TVariables,\n  TData\n> {\n  return useDeepMemo<WatchQueryOptions<TVariables, TData>>(() => {\n    if (options === skipToken) {\n      return { query, fetchPolicy: \"standby\" };\n    }\n\n    const fetchPolicy =\n      options.fetchPolicy ||\n      client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\";\n\n    const watchQueryOptions = {\n      ...options,\n      fetchPolicy,\n      query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0,\n    };\n\n    if (__DEV__) {\n      validateOptions(watchQueryOptions);\n    }\n\n    // Assign the updated fetch policy after our validation since `standby` is\n    // not a supported fetch policy on its own without the use of `skip`.\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n\n    return watchQueryOptions;\n  }, [client, options, query]);\n}\n", "import { Trie } from \"@wry/trie\";\nimport type {\n  ApolloClient,\n  ObservableQuery,\n  WatchFragmentOptions,\n} from \"../../../core/index.js\";\nimport { canUseWeakMap } from \"../../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey, FragmentCacheKey } from \"./types.js\";\nimport { FragmentReference } from \"./FragmentReference.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>(\n    canUseWeakMap\n  );\n  private fragmentRefs = new Trie<{ current?: FragmentReference }>(\n    canUseWeakMap\n  );\n\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = Object.create(null)) {\n    this.options = options;\n  }\n\n  getQueryRef<TData = any>(\n    cacheKey: CacheKey,\n    createObservable: () => ObservableQuery<TData>\n  ) {\n    const ref = this.queryRefs.lookupArray(cacheKey) as {\n      current?: InternalQueryReference<TData>;\n    };\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  getFragmentRef<TData, TVariables>(\n    cacheKey: FragmentCacheKey,\n    client: ApolloClient<any>,\n    options: WatchFragmentOptions<TData, TVariables> & { from: string }\n  ) {\n    const ref = this.fragmentRefs.lookupArray(cacheKey) as {\n      current?: FragmentReference<TData, TVariables>;\n    };\n\n    if (!ref.current) {\n      ref.current = new FragmentReference(client, options, {\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n\n  add(cacheKey: CacheKey, queryRef: InternalQueryReference<unknown>) {\n    const ref = this.queryRefs.lookupArray(cacheKey);\n    ref.current = queryRef;\n  }\n}\n", "import { equal } from \"@wry/equality\";\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../../core/index.js\";\nimport type {\n  ObservableSubscription,\n  PromiseWithState,\n} from \"../../../utilities/index.js\";\nimport {\n  createFulfilledPromise,\n  createRejectedPromise,\n} from \"../../../utilities/index.js\";\nimport type { QueryKey } from \"./types.js\";\nimport { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport { invariant } from \"../../../utilities/globals/invariantWrappers.js\";\nimport type { MaybeMasked } from \"../../../masking/index.js\";\n\ntype QueryRefPromise<TData> = PromiseWithState<\n  ApolloQueryResult<MaybeMasked<TData>>\n>;\n\ntype Listener<TData> = (promise: QueryRefPromise<TData>) => void;\n\ntype FetchMoreOptions<TData> = Parameters<\n  ObservableQuery<TData>[\"fetchMore\"]\n>[0];\n\nconst QUERY_REFERENCE_SYMBOL: unique symbol = Symbol.for(\n  \"apollo.internal.queryRef\"\n);\nconst PROMISE_SYMBOL: unique symbol = Symbol.for(\"apollo.internal.refPromise\");\ndeclare const QUERY_REF_BRAND: unique symbol;\n/**\n * A `QueryReference` is an opaque object returned by `useBackgroundQuery`.\n * A child component reading the `QueryReference` via `useReadQuery` will\n * suspend until the promise resolves.\n */\nexport interface QueryRef<TData = unknown, TVariables = unknown> {\n  /** @internal */\n  [QUERY_REF_BRAND]?(variables: TVariables): TData;\n}\n\n/**\n * @internal\n * For usage in internal helpers only.\n */\ninterface WrappedQueryRef<TData = unknown, TVariables = unknown>\n  extends QueryRef<TData, TVariables> {\n  /** @internal */\n  readonly [QUERY_REFERENCE_SYMBOL]: InternalQueryReference<TData>;\n  /** @internal */\n  [PROMISE_SYMBOL]: QueryRefPromise<TData>;\n  /** @internal */\n  toPromise?(): Promise<unknown>;\n}\n\n/**\n * @deprecated Please use the `QueryRef` interface instead of `QueryReference`.\n *\n * {@inheritDoc @apollo/client!QueryRef:interface}\n */\nexport interface QueryReference<TData = unknown, TVariables = unknown>\n  extends QueryRef<TData, TVariables> {\n  /**\n   * @deprecated Please use the `QueryRef` interface instead of `QueryReference`.\n   *\n   * {@inheritDoc @apollo/client!PreloadedQueryRef#toPromise:member(1)}\n   */\n  toPromise?: unknown;\n}\n\n/**\n * {@inheritDoc @apollo/client!QueryRef:interface}\n */\nexport interface PreloadedQueryRef<TData = unknown, TVariables = unknown>\n  extends QueryRef<TData, TVariables> {\n  /**\n   * A function that returns a promise that resolves when the query has finished\n   * loading. The promise resolves with the `QueryReference` itself.\n   *\n   * @remarks\n   * This method is useful for preloading queries in data loading routers, such\n   * as [React Router](https://reactrouter.com/en/main) or [TanStack Router](https://tanstack.com/router),\n   * to prevent routes from transitioning until the query has finished loading.\n   * `data` is not exposed on the promise to discourage using the data in\n   * `loader` functions and exposing it to your route components. Instead, we\n   * prefer you rely on `useReadQuery` to access the data to ensure your\n   * component can rerender with cache updates. If you need to access raw query\n   * data, use `client.query()` directly.\n   *\n   * @example\n   * Here's an example using React Router's `loader` function:\n   * ```ts\n   * import { createQueryPreloader } from \"@apollo/client\";\n   *\n   * const preloadQuery = createQueryPreloader(client);\n   *\n   * export async function loader() {\n   *   const queryRef = preloadQuery(GET_DOGS_QUERY);\n   *\n   *   return queryRef.toPromise();\n   * }\n   *\n   * export function RouteComponent() {\n   *   const queryRef = useLoaderData();\n   *   const { data } = useReadQuery(queryRef);\n   *\n   *   // ...\n   * }\n   * ```\n   *\n   * @since 3.9.0\n   */\n  toPromise(): Promise<PreloadedQueryRef<TData, TVariables>>;\n}\n\ninterface InternalQueryReferenceOptions {\n  onDispose?: () => void;\n  autoDisposeTimeoutMs?: number;\n}\n\nexport function wrapQueryRef<TData, TVariables extends OperationVariables>(\n  internalQueryRef: InternalQueryReference<TData>\n) {\n  const ref: WrappedQueryRef<TData, TVariables> = {\n    toPromise() {\n      // We avoid resolving this promise with the query data because we want to\n      // discourage using the server data directly from the queryRef. Instead,\n      // the data should be accessed through `useReadQuery`. When the server\n      // data is needed, its better to use `client.query()` directly.\n      //\n      // Here we resolve with the ref itself to make using this in React Router\n      // or TanStack Router `loader` functions a bit more ergonomic e.g.\n      //\n      // function loader() {\n      //   return { queryRef: await preloadQuery(query).toPromise() }\n      // }\n      return getWrappedPromise(ref).then(() => ref);\n    },\n    [QUERY_REFERENCE_SYMBOL]: internalQueryRef,\n    [PROMISE_SYMBOL]: internalQueryRef.promise,\n  };\n\n  return ref;\n}\n\nexport function assertWrappedQueryRef<TData, TVariables>(\n  queryRef: QueryRef<TData, TVariables>\n): asserts queryRef is WrappedQueryRef<TData, TVariables>;\nexport function assertWrappedQueryRef<TData, TVariables>(\n  queryRef: QueryRef<TData, TVariables> | undefined | null\n): asserts queryRef is WrappedQueryRef<TData, TVariables> | undefined | null;\nexport function assertWrappedQueryRef<TData, TVariables>(\n  queryRef: QueryRef<TData, TVariables> | undefined | null\n) {\n  invariant(\n    !queryRef || QUERY_REFERENCE_SYMBOL in queryRef,\n    \"Expected a QueryRef object, but got something else instead.\"\n  );\n}\n\nexport function getWrappedPromise<TData>(\n  queryRef: WrappedQueryRef<TData, any>\n) {\n  const internalQueryRef = unwrapQueryRef(queryRef);\n\n  return internalQueryRef.promise.status === \"fulfilled\" ?\n      internalQueryRef.promise\n    : queryRef[PROMISE_SYMBOL];\n}\n\nexport function unwrapQueryRef<TData>(\n  queryRef: WrappedQueryRef<TData>\n): InternalQueryReference<TData>;\nexport function unwrapQueryRef<TData>(\n  queryRef: Partial<WrappedQueryRef<TData>>\n): undefined | InternalQueryReference<TData>;\nexport function unwrapQueryRef<TData>(\n  queryRef: Partial<WrappedQueryRef<TData>>\n) {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\n\nexport function updateWrappedQueryRef<TData>(\n  queryRef: WrappedQueryRef<TData>,\n  promise: QueryRefPromise<TData>\n) {\n  queryRef[PROMISE_SYMBOL] = promise;\n}\n\nconst OBSERVED_CHANGED_OPTIONS = [\n  \"canonizeResults\",\n  \"context\",\n  \"errorPolicy\",\n  \"fetchPolicy\",\n  \"refetchWritePolicy\",\n  \"returnPartialData\",\n] as const;\n\ntype ObservedOptions = Pick<\n  WatchQueryOptions,\n  (typeof OBSERVED_CHANGED_OPTIONS)[number]\n>;\n\nexport class InternalQueryReference<TData = unknown> {\n  public result!: ApolloQueryResult<MaybeMasked<TData>>;\n  public readonly key: QueryKey = {};\n  public readonly observable: ObservableQuery<TData>;\n\n  public promise!: QueryRefPromise<TData>;\n\n  private subscription!: ObservableSubscription;\n  private listeners = new Set<Listener<TData>>();\n  private autoDisposeTimeoutId?: NodeJS.Timeout;\n\n  private resolve:\n    | ((result: ApolloQueryResult<MaybeMasked<TData>>) => void)\n    | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private references = 0;\n  private softReferences = 0;\n\n  constructor(\n    observable: ObservableQuery<TData, any>,\n    options: InternalQueryReferenceOptions\n  ) {\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    this.setResult();\n    this.subscribeToQuery();\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this queryRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    const startDisposeTimer = () => {\n      if (!this.references) {\n        this.autoDisposeTimeoutId = setTimeout(\n          this.dispose,\n          options.autoDisposeTimeoutMs ?? 30_000\n        );\n      }\n    };\n\n    // We wait until the request has settled to ensure we don't dispose of the\n    // query ref before the request finishes, otherwise we would leave the\n    // promise in a pending state rendering the suspense boundary indefinitely.\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n\n  get disposed() {\n    return this.subscription.closed;\n  }\n\n  get watchQueryOptions() {\n    return this.observable.options;\n  }\n\n  reinitialize() {\n    const { observable } = this;\n\n    const originalFetchPolicy = this.watchQueryOptions.fetchPolicy;\n    const avoidNetworkRequests =\n      originalFetchPolicy === \"no-cache\" || originalFetchPolicy === \"standby\";\n\n    try {\n      if (avoidNetworkRequests) {\n        observable.silentSetOptions({ fetchPolicy: \"standby\" });\n      } else {\n        observable.resetLastResults();\n        observable.silentSetOptions({ fetchPolicy: \"cache-first\" });\n      }\n\n      this.subscribeToQuery();\n\n      if (avoidNetworkRequests) {\n        return;\n      }\n\n      observable.resetDiff();\n      this.setResult();\n    } finally {\n      observable.silentSetOptions({ fetchPolicy: originalFetchPolicy });\n    }\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  softRetain() {\n    this.softReferences++;\n    let disposed = false;\n\n    return () => {\n      // Tracking if this has already been called helps ensure that\n      // multiple calls to this function won't decrement the reference\n      // counter more than it should. Subsequent calls just result in a noop.\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.softReferences--;\n      setTimeout(() => {\n        if (!this.softReferences && !this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  didChangeOptions(watchQueryOptions: ObservedOptions) {\n    return OBSERVED_CHANGED_OPTIONS.some(\n      (option) =>\n        option in watchQueryOptions &&\n        !equal(this.watchQueryOptions[option], watchQueryOptions[option])\n    );\n  }\n\n  applyOptions(watchQueryOptions: ObservedOptions) {\n    const {\n      fetchPolicy: currentFetchPolicy,\n      canonizeResults: currentCanonizeResults,\n    } = this.watchQueryOptions;\n\n    // \"standby\" is used when `skip` is set to `true`. Detect when we've\n    // enabled the query (i.e. `skip` is `false`) to execute a network request.\n    if (\n      currentFetchPolicy === \"standby\" &&\n      currentFetchPolicy !== watchQueryOptions.fetchPolicy\n    ) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = { ...this.result, ...this.observable.getCurrentResult() };\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n\n    return this.promise;\n  }\n\n  listen(listener: Listener<TData>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  refetch(variables: OperationVariables | undefined) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  }\n\n  fetchMore(options: FetchMoreOptions<TData>) {\n    return this.initiateFetch(this.observable.fetchMore<TData>(options));\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private handleNext(result: ApolloQueryResult<MaybeMasked<TData>>) {\n    switch (this.promise.status) {\n      case \"pending\": {\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n        this.result = result;\n        this.resolve?.(result);\n        break;\n      }\n      default: {\n        // This occurs when switching to a result that is fully cached when this\n        // class is instantiated. ObservableQuery will run reobserve when\n        // subscribing, which delivers a result from the cache.\n        if (\n          result.data === this.result.data &&\n          result.networkStatus === this.result.networkStatus\n        ) {\n          return;\n        }\n\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n\n        this.result = result;\n        this.promise = createFulfilledPromise(result);\n        this.deliver(this.promise);\n        break;\n      }\n    }\n  }\n\n  private handleError(error: ApolloError) {\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(\n      this.handleNext,\n      this.handleError\n    );\n\n    switch (this.promise.status) {\n      case \"pending\": {\n        this.reject?.(error);\n        break;\n      }\n      default: {\n        this.promise = createRejectedPromise(error);\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private deliver(promise: QueryRefPromise<TData>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private initiateFetch(\n    returnedPromise: Promise<ApolloQueryResult<MaybeMasked<TData>>>\n  ) {\n    this.promise = this.createPendingPromise();\n    this.promise.catch(() => {});\n\n    // If the data returned from the fetch is deeply equal to the data already\n    // in the cache, `handleNext` will not be triggered leaving the promise we\n    // created in a pending state forever. To avoid this situtation, we attempt\n    // to resolve the promise if `handleNext` hasn't been run to ensure the\n    // promise is resolved correctly.\n    returnedPromise\n      .then(() => {\n        // In the case of `fetchMore`, this promise is resolved before a cache\n        // result is emitted due to the fact that `fetchMore` sets a `no-cache`\n        // fetch policy and runs `cache.batch` in its `.then` handler. Because\n        // the timing is different, we accidentally run this update twice\n        // causing an additional re-render with the `fetchMore` result by\n        // itself. By wrapping in `setTimeout`, this should provide a short\n        // delay to allow the `QueryInfo.notify` handler to run before this\n        // promise is checked.\n        // See https://github.com/apollographql/apollo-client/issues/11315 for\n        // more information\n        setTimeout(() => {\n          if (this.promise.status === \"pending\") {\n            // Use the current result from the observable instead of the value\n            // resolved from the promise. This avoids issues in some cases where\n            // the raw resolved value should not be the emitted value, such as\n            // when a `fetchMore` call returns an empty array after it has\n            // reached the end of the list.\n            //\n            // See the following for more information:\n            // https://github.com/apollographql/apollo-client/issues/11642\n            this.result = this.observable.getCurrentResult();\n            this.resolve?.(this.result);\n          }\n        });\n      })\n      .catch((error) => this.reject?.(error));\n\n    return returnedPromise;\n  }\n\n  private subscribeToQuery() {\n    this.subscription = this.observable\n      .filter(\n        (result) => !equal(result.data, {}) && !equal(result, this.result)\n      )\n      .subscribe(this.handleNext, this.handleError);\n  }\n\n  private setResult() {\n    // Don't save this result as last result to prevent delivery of last result\n    // when first subscribing\n    const result = this.observable.getCurrentResult(false);\n\n    if (equal(result, this.result)) {\n      return;\n    }\n\n    this.result = result;\n    this.promise =\n      (\n        result.data &&\n        (!result.partial || this.watchQueryOptions.returnPartialData)\n      ) ?\n        createFulfilledPromise(result)\n      : this.createPendingPromise();\n  }\n\n  private createPendingPromise() {\n    return wrapPromiseWithState(\n      new Promise<ApolloQueryResult<MaybeMasked<TData>>>((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      })\n    );\n  }\n}\n", "import { equal } from \"@wry/equality\";\nimport type {\n  WatchFragmentOptions,\n  WatchFragmentResult,\n} from \"../../../cache/index.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\nimport type { MaybeMasked } from \"../../../masking/index.js\";\nimport {\n  createFulfilledPromise,\n  wrapPromiseWithState,\n} from \"../../../utilities/index.js\";\nimport type {\n  Observable,\n  ObservableSubscription,\n  PromiseWithState,\n} from \"../../../utilities/index.js\";\nimport type { FragmentKey } from \"./types.js\";\n\ntype FragmentRefPromise<TData> = PromiseWithState<TData>;\ntype Listener<TData> = (promise: FragmentRefPromise<TData>) => void;\n\ninterface FragmentReferenceOptions {\n  autoDisposeTimeoutMs?: number;\n  onDispose?: () => void;\n}\n\nexport class FragmentReference<\n  TData = unknown,\n  TVariables = Record<string, unknown>,\n> {\n  public readonly observable: Observable<WatchFragmentResult<TData>>;\n  public readonly key: FragmentKey = {};\n  public promise!: FragmentRefPromise<MaybeMasked<TData>>;\n\n  private resolve: ((result: MaybeMasked<TData>) => void) | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private subscription!: ObservableSubscription;\n  private listeners = new Set<Listener<MaybeMasked<TData>>>();\n  private autoDisposeTimeoutId?: NodeJS.Timeout;\n\n  private references = 0;\n\n  constructor(\n    client: ApolloClient<any>,\n    watchFragmentOptions: WatchFragmentOptions<TData, TVariables> & {\n      from: string;\n    },\n    options: FragmentReferenceOptions\n  ) {\n    this.dispose = this.dispose.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n\n    this.observable = client.watchFragment(watchFragmentOptions);\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    const diff = this.getDiff(client, watchFragmentOptions);\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this fragmentRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    const startDisposeTimer = () => {\n      if (!this.references) {\n        this.autoDisposeTimeoutId = setTimeout(\n          this.dispose,\n          options.autoDisposeTimeoutMs ?? 30_000\n        );\n      }\n    };\n\n    this.promise =\n      diff.complete ?\n        createFulfilledPromise(diff.result)\n      : this.createPendingPromise();\n    this.subscribeToFragment();\n\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n\n  listen(listener: Listener<MaybeMasked<TData>>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private subscribeToFragment() {\n    this.subscription = this.observable.subscribe(\n      this.handleNext.bind(this),\n      this.handleError.bind(this)\n    );\n  }\n\n  private handleNext(result: WatchFragmentResult<TData>) {\n    switch (this.promise.status) {\n      case \"pending\": {\n        if (result.complete) {\n          return this.resolve?.(result.data);\n        }\n\n        this.deliver(this.promise);\n        break;\n      }\n      case \"fulfilled\": {\n        // This can occur when we already have a result written to the cache and\n        // we subscribe for the first time. We create a fulfilled promise in the\n        // constructor with a value that is the same as the first emitted value\n        // so we want to skip delivering it.\n        if (equal(this.promise.value, result.data)) {\n          return;\n        }\n\n        this.promise =\n          result.complete ?\n            createFulfilledPromise(result.data)\n          : this.createPendingPromise();\n\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private handleError(error: unknown) {\n    this.reject?.(error);\n  }\n\n  private deliver(promise: FragmentRefPromise<MaybeMasked<TData>>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private createPendingPromise() {\n    return wrapPromiseWithState(\n      new Promise<MaybeMasked<TData>>((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      })\n    );\n  }\n\n  private getDiff<TData, TVariables>(\n    client: ApolloClient<any>,\n    options: WatchFragmentOptions<TData, TVariables> & { from: string }\n  ) {\n    const { cache } = client;\n    const { from, fragment, fragmentName } = options;\n\n    const diff = cache.diff({\n      ...options,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      returnPartialData: true,\n      id: from,\n      optimistic: true,\n    });\n\n    return {\n      ...diff,\n      result: client[\"queryManager\"].maskFragment({\n        fragment,\n        fragmentName,\n        data: diff.result,\n      }) as MaybeMasked<TData>,\n    };\n  }\n}\n", "import type { SuspenseCacheOptions } from \"../index.js\";\nimport { SuspenseCache } from \"./SuspenseCache.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\n\ndeclare module \"../../../core/ApolloClient.js\" {\n  interface DefaultOptions {\n    react?: {\n      suspense?: Readonly<SuspenseCacheOptions>;\n    };\n  }\n}\n\nconst suspenseCacheSymbol = Symbol.for(\"apollo.suspenseCache\");\n\nexport function getSuspenseCache(\n  client: ApolloClient<object> & {\n    [suspenseCacheSymbol]?: SuspenseCache;\n  }\n) {\n  if (!client[suspenseCacheSymbol]) {\n    client[suspenseCacheSymbol] = new SuspenseCache(\n      client.defaultOptions.react?.suspense\n    );\n  }\n\n  return client[suspenseCacheSymbol];\n}\n", "export const skipToken = Symbol.for(\"apollo.skipToken\");\nexport type SkipToken = typeof skipToken;\n", "import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport type { SubscribeToMoreFunction } from \"../../core/watchQueryOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryRef } from \"../internal/index.js\";\nimport type { BackgroundQueryHookOptions, NoInfer } from \"../types/types.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreFunction, RefetchFunction } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport type { SkipToken } from \"./constants.js\";\n\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#fetchMore:member(1)} */\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#refetch:member(1)} */\n  refetch: RefetchFunction<TData, TVariables>;\n};\n\ntype BackgroundQueryHookOptionsNoInfer<\n  TData,\n  TVariables extends OperationVariables,\n> = BackgroundQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>;\n\nexport function useBackgroundQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<BackgroundQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & TOptions\n): [\n  (\n    | QueryRef<\n        TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n          TOptions[\"returnPartialData\"] extends true ?\n            DeepPartial<TData> | undefined\n          : TData | undefined\n        : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n        : TData,\n        TVariables\n      >\n    | (TOptions[\"skip\"] extends boolean ? undefined : never)\n  ),\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryRef<DeepPartial<TData> | undefined, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryRef<TData | undefined, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): [\n  QueryRef<DeepPartial<TData>, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n  }\n): [\n  QueryRef<DeepPartial<TData>, TVariables>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n  }\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [QueryRef<TData, TVariables>, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SkipToken\n): [undefined, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n        returnPartialData: true;\n      })\n): [\n  QueryRef<DeepPartial<TData>, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SkipToken | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables> = Object.create(null)\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  return wrapHook(\n    \"useBackgroundQuery\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useBackgroundQuery_,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(query, options);\n}\n\nfunction useBackgroundQuery_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryRef<TData, TVariables> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  const didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current ||= fetchPolicy !== \"standby\";\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions as WatchQueryOptions<any, any>)\n  );\n\n  const [wrappedQueryRef, setWrappedQueryRef] = React.useState(\n    wrapQueryRef(queryRef)\n  );\n  if (unwrapQueryRef(wrappedQueryRef) !== queryRef) {\n    setWrappedQueryRef(wrapQueryRef(queryRef));\n  }\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    const promise = queryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(wrappedQueryRef, promise);\n  }\n\n  // This prevents issues where rerendering useBackgroundQuery after the\n  // queryRef has been disposed would cause the hook to return a new queryRef\n  // instance since disposal also removes it from the suspense cache. We add\n  // the queryRef back in the suspense cache so that the next render will reuse\n  // this queryRef rather than initializing a new instance.\n  React.useEffect(() => {\n    // Since the queryRef is disposed async via `setTimeout`, we have to wait a\n    // tick before checking it and adding back to the suspense cache.\n    const id = setTimeout(() => {\n      if (queryRef.disposed) {\n        suspenseCache.add(cacheKey, queryRef);\n      }\n    });\n\n    return () => clearTimeout(id);\n    // Omitting the deps is intentional. This avoids stale closures and the\n    // conditional ensures we aren't running the logic on each render.\n  });\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options as FetchMoreQueryOptions<any>);\n\n      setWrappedQueryRef(wrapQueryRef(queryRef));\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setWrappedQueryRef(wrapQueryRef(queryRef));\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  React.useEffect(() => queryRef.softRetain(), [queryRef]);\n\n  return [\n    didFetchResult.current ? wrappedQueryRef : void 0,\n    {\n      fetchMore,\n      refetch,\n      // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n      subscribeToMore: queryRef.observable\n        .subscribeToMore as SubscribeToMoreFunction<TData, TVariables>,\n    },\n  ];\n}\n", "import type {\n  ApolloClient,\n  DocumentNode,\n  OperationVariables,\n  Reference,\n  StoreObject,\n  TypedDocumentNode,\n} from \"../../core/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport * as React from \"rehackt\";\nimport type { FragmentKey } from \"../internal/cache/types.js\";\nimport { __use } from \"./internal/__use.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { FragmentType, MaybeMasked } from \"../../masking/index.js\";\nimport type { NoInfer, VariablesOption } from \"../types/types.js\";\n\ntype From<TData> =\n  | StoreObject\n  | Reference\n  | FragmentType<NoInfer<TData>>\n  | string\n  | null;\n\nexport type UseSuspenseFragmentOptions<\n  TData,\n  TVariables extends OperationVariables,\n> = {\n  /**\n   * A GraphQL document created using the `gql` template string tag from\n   * `graphql-tag` with one or more fragments which will be used to determine\n   * the shape of data to read. If you provide more than one fragment in this\n   * document then you must also specify `fragmentName` to select a single.\n   */\n  fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n  /**\n   * The name of the fragment in your GraphQL document to be used. If you do\n   * not provide a `fragmentName` and there is only one fragment in your\n   * `fragment` document then that fragment will be used.\n   */\n  fragmentName?: string;\n  from: From<TData>;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n} & VariablesOption<NoInfer<TVariables>>;\n\nexport type UseSuspenseFragmentResult<TData> = { data: MaybeMasked<TData> };\n\nconst NULL_PLACEHOLDER = [] as unknown as [\n  FragmentKey,\n  Promise<MaybeMasked<any> | null>,\n];\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables> & {\n    from: NonNullable<From<TData>>;\n  }\n): UseSuspenseFragmentResult<TData>;\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables> & {\n    from: null;\n  }\n): UseSuspenseFragmentResult<null>;\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables> & {\n    from: From<TData>;\n  }\n): UseSuspenseFragmentResult<TData | null>;\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables>\n): UseSuspenseFragmentResult<TData>;\n\nexport function useSuspenseFragment<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables>\n): UseSuspenseFragmentResult<TData | null> {\n  return wrapHook(\n    \"useSuspenseFragment\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useSuspenseFragment_,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(options);\n}\n\nfunction useSuspenseFragment_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables>\n): UseSuspenseFragmentResult<TData | null> {\n  const client = useApolloClient(options.client);\n  const { from, variables } = options;\n  const { cache } = client;\n\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  ) as string | null;\n\n  const fragmentRef =\n    id === null ? null : (\n      getSuspenseCache(client).getFragmentRef(\n        [id, options.fragment, canonicalStringify(variables)],\n        client,\n        { ...options, variables: variables as TVariables, from: id }\n      )\n    );\n\n  let [current, setPromise] = React.useState<\n    [FragmentKey, Promise<MaybeMasked<TData> | null>]\n  >(\n    fragmentRef === null ? NULL_PLACEHOLDER : (\n      [fragmentRef.key, fragmentRef.promise]\n    )\n  );\n\n  React.useEffect(() => {\n    if (fragmentRef === null) {\n      return;\n    }\n\n    const dispose = fragmentRef.retain();\n    const removeListener = fragmentRef.listen((promise) => {\n      setPromise([fragmentRef.key, promise]);\n    });\n\n    return () => {\n      dispose();\n      removeListener();\n    };\n  }, [fragmentRef]);\n\n  if (fragmentRef === null) {\n    return { data: null };\n  }\n\n  if (current[0] !== fragmentRef.key) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    current[0] = fragmentRef.key;\n    current[1] = fragmentRef.promise;\n  }\n\n  const data = __use(current[1]);\n\n  return { data };\n}\n", "import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport type {\n  SubscribeToMoreFunction,\n  SubscribeToMoreOptions,\n} from \"../../core/watchQueryOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  assertWrappedQueryRef,\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryRef } from \"../internal/index.js\";\nimport type { LoadableQueryHookOptions } from \"../types/types.js\";\nimport { __use, useRenderGuard } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreFunction, RefetchFunction } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type {\n  DeepPartial,\n  OnlyRequiredProperties,\n} from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport type LoadQueryFunction<TVariables extends OperationVariables> = (\n  // Use variadic args to handle cases where TVariables is type `never`, in\n  // which case we don't want to allow a variables argument. In other\n  // words, we don't want to allow variables to be passed as an argument to this\n  // function if the query does not expect variables in the document.\n  ...args: [TVariables] extends [never] ? []\n  : {} extends OnlyRequiredProperties<TVariables> ? [variables?: TVariables]\n  : [variables: TVariables]\n) => void;\n\ntype ResetFunction = () => void;\n\nexport type UseLoadableQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = [\n  loadQuery: LoadQueryFunction<TVariables>,\n  queryRef: QueryRef<TData, TVariables> | null,\n  handlers: {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#fetchMore:member} */\n    fetchMore: FetchMoreFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#refetch:member} */\n    refetch: RefetchFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n    subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n    /**\n     * A function that resets the `queryRef` back to `null`.\n     */\n    reset: ResetFunction;\n  },\n];\n\nexport function useLoadableQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends LoadableQueryHookOptions,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions & TOptions\n): UseLoadableQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n    TOptions[\"returnPartialData\"] extends true ?\n      DeepPartial<TData> | undefined\n    : TData | undefined\n  : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n  : TData,\n  TVariables\n>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<TData | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n  }\n): UseLoadableQueryResult<DeepPartial<TData>, TVariables>;\n\n/**\n * A hook for imperatively loading a query, such as responding to a user\n * interaction.\n *\n * > Refer to the [Suspense - Fetching in response to user interaction](https://www.apollographql.com/docs/react/data/suspense#fetching-in-response-to-user-interaction) section for a more in-depth overview of `useLoadableQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLoadableQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function App() {\n *   const [loadGreeting, queryRef] = useLoadableQuery(GET_GREETING);\n *\n *   return (\n *     <>\n *       <button onClick={() => loadGreeting({ language: \"english\" })}>\n *         Load greeting\n *       </button>\n *       <Suspense fallback={<div>Loading...</div>}>\n *         {queryRef && <Hello queryRef={queryRef} />}\n *       </Suspense>\n *     </>\n *   );\n * }\n *\n * function Hello({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.greeting.message}</div>;\n * }\n * ```\n *\n * @since 3.9.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns A tuple in the form of `[loadQuery, queryRef, handlers]`\n */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions\n): UseLoadableQueryResult<TData, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions = Object.create(null)\n): UseLoadableQueryResult<TData, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { queryKey = [] } = options;\n\n  const [queryRef, setQueryRef] = React.useState<QueryRef<\n    TData,\n    TVariables\n  > | null>(null);\n\n  assertWrappedQueryRef(queryRef);\n\n  const internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n\n  if (queryRef && internalQueryRef?.didChangeOptions(watchQueryOptions)) {\n    const promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n\n  const calledDuringRender = useRenderGuard();\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<TVariables, TData>\n      );\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.refetch(options);\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const loadQuery: LoadQueryFunction<TVariables> = React.useCallback(\n    (...args) => {\n      invariant(\n        !calledDuringRender(),\n        \"useLoadableQuery: 'loadQuery' should not be called during render. To start a query during render, use the 'useBackgroundQuery' hook.\"\n      );\n\n      const [variables] = args;\n\n      const cacheKey: CacheKey = [\n        query,\n        canonicalStringify(variables),\n        ...([] as any[]).concat(queryKey),\n      ];\n\n      const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n        client.watchQuery({\n          ...watchQueryOptions,\n          variables,\n        } as WatchQueryOptions<any, any>)\n      );\n\n      setQueryRef(wrapQueryRef(queryRef));\n    },\n    [\n      query,\n      queryKey,\n      suspenseCache,\n      watchQueryOptions,\n      calledDuringRender,\n      client,\n    ]\n  );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => {\n        invariant(\n          internalQueryRef,\n          \"The query has not been loaded. Please load the query.\"\n        );\n\n        return internalQueryRef.observable.subscribeToMore(\n          // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n          options as any as SubscribeToMoreOptions<TData, OperationVariables>\n        );\n      },\n      [internalQueryRef]\n    );\n\n  const reset: ResetFunction = React.useCallback(() => {\n    setQueryRef(null);\n  }, []);\n\n  return [loadQuery, queryRef, { fetchMore, refetch, reset, subscribeToMore }];\n}\n", "import * as React from \"rehackt\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryRef } from \"../internal/index.js\";\nimport type { OperationVariables } from \"../../core/types.js\";\nimport type { SubscribeToMoreFunction } from \"../../core/watchQueryOptions.js\";\nimport type { RefetchFunction, FetchMoreFunction } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreQueryOptions } from \"../../core/watchQueryOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { ApolloClient } from \"../../core/ApolloClient.js\";\nimport type { ObservableQuery } from \"../../core/ObservableQuery.js\";\n\nexport interface UseQueryRefHandlersResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  /** {@inheritDoc @apollo/client!ObservableQuery#refetch:member(1)} */\n  refetch: RefetchFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#fetchMore:member(1)} */\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  queryRef: QueryRef<TData, TVariables>\n): UseQueryRefHandlersResult<TData, TVariables> {\n  const unwrapped = unwrapQueryRef(queryRef);\n  const clientOrObsQuery = useApolloClient(\n    unwrapped ?\n      // passing an `ObservableQuery` is not supported by the types, but it will\n      // return any truthy value that is passed in as an override so we cast the result\n      (unwrapped[\"observable\"] as any)\n    : undefined\n  ) as ApolloClient<any> | ObservableQuery<TData>;\n\n  return wrapHook(\n    \"useQueryRefHandlers\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useQueryRefHandlers_,\n    clientOrObsQuery\n  )(queryRef);\n}\n\nfunction useQueryRefHandlers_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  queryRef: QueryRef<TData, TVariables>\n): UseQueryRefHandlersResult<TData, TVariables> {\n  assertWrappedQueryRef(queryRef);\n  const [previousQueryRef, setPreviousQueryRef] = React.useState(queryRef);\n  const [wrappedQueryRef, setWrappedQueryRef] = React.useState(queryRef);\n  const internalQueryRef = unwrapQueryRef(queryRef);\n\n  // To ensure we can support React transitions, this hook needs to manage the\n  // queryRef state and apply React's state value immediately to the existing\n  // queryRef since this hook doesn't return the queryRef directly\n  if (previousQueryRef !== queryRef) {\n    setPreviousQueryRef(queryRef);\n    setWrappedQueryRef(queryRef);\n  } else {\n    updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n  }\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = internalQueryRef.refetch(variables);\n\n      setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<any, any>\n      );\n\n      setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  return {\n    refetch,\n    fetchMore,\n    // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n    subscribeToMore: internalQueryRef.observable\n      .subscribeToMore as SubscribeToMoreFunction<TData, TVariables>,\n  };\n}\n", "import * as React from \"rehackt\";\nimport {\n  assertWrappedQueryRef,\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloClient,\n  NetworkStatus,\n  ObservableQuery,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport type { MaybeMasked } from \"../../masking/index.js\";\n\nexport interface UseReadQueryResult<TData = unknown> {\n  /**\n   * An object containing the result of your GraphQL query after it completes.\n   *\n   * This value might be `undefined` if a query results in one or more errors\n   * (depending on the query's `errorPolicy`).\n   */\n  data: MaybeMasked<TData>;\n  /**\n   * If the query produces one or more errors, this object contains either an\n   * array of `graphQLErrors` or a single `networkError`. Otherwise, this value\n   * is `undefined`.\n   *\n   * This property can be ignored when using the default `errorPolicy` or an\n   * `errorPolicy` of `none`. The hook will throw the error instead of setting\n   * this property.\n   */\n  error: ApolloError | undefined;\n  /**\n   * A number indicating the current network state of the query's associated\n   * request. {@link https://github.com/apollographql/apollo-client/blob/d96f4578f89b933c281bb775a39503f6cdb59ee8/src/core/networkStatus.ts#L4 | See possible values}.\n   */\n  networkStatus: NetworkStatus;\n}\n\nexport function useReadQuery<TData>(\n  queryRef: QueryRef<TData>\n): UseReadQueryResult<TData> {\n  const unwrapped = unwrapQueryRef(queryRef);\n  const clientOrObsQuery = useApolloClient(\n    unwrapped ?\n      // passing an `ObservableQuery` is not supported by the types, but it will\n      // return any truthy value that is passed in as an override so we cast the result\n      (unwrapped[\"observable\"] as any)\n    : undefined\n  ) as ApolloClient<any> | ObservableQuery<TData>;\n\n  return wrapHook(\n    \"useReadQuery\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useReadQuery_,\n    clientOrObsQuery\n  )(queryRef);\n}\n\nfunction useReadQuery_<TData>(\n  queryRef: QueryRef<TData>\n): UseReadQueryResult<TData> {\n  assertWrappedQueryRef(queryRef);\n  const internalQueryRef = React.useMemo(\n    () => unwrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  const getPromise = React.useCallback(\n    () => getWrappedPromise(queryRef),\n    [queryRef]\n  );\n\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n\n  React.useEffect(() => internalQueryRef.retain(), [internalQueryRef]);\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          updateWrappedQueryRef(queryRef, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef, queryRef]\n    ),\n    getPromise,\n    getPromise\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n", "import type {\n  ApolloClient,\n  DefaultContext,\n  DocumentNode,\n  ErrorPolicy,\n  OperationVariables,\n  RefetchWritePolicy,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport type {\n  DeepPartial,\n  OnlyRequiredProperties,\n} from \"../../utilities/index.js\";\nimport { InternalQueryReference, wrapQueryRef } from \"../internal/index.js\";\nimport type { PreloadedQueryRef } from \"../internal/index.js\";\nimport type { NoInfer, VariablesOption } from \"../index.js\";\nimport { wrapHook } from \"../hooks/internal/index.js\";\n\nexport type PreloadQueryFetchPolicy = Extract<\n  WatchQueryFetchPolicy,\n  \"cache-first\" | \"network-only\" | \"no-cache\" | \"cache-and-network\"\n>;\n\nexport type PreloadQueryOptions<\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#canonizeResults:member} */\n  canonizeResults?: boolean;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n  context?: DefaultContext;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n  errorPolicy?: ErrorPolicy;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#fetchPolicy:member} */\n  fetchPolicy?: PreloadQueryFetchPolicy;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#returnPartialData:member} */\n  returnPartialData?: boolean;\n  /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#refetchWritePolicy:member} */\n  refetchWritePolicy?: RefetchWritePolicy;\n} & VariablesOption<TVariables>;\n\ntype PreloadQueryOptionsArg<\n  TVariables extends OperationVariables,\n  TOptions = unknown,\n> = [TVariables] extends [never] ?\n  [options?: PreloadQueryOptions<never> & TOptions]\n: {} extends OnlyRequiredProperties<TVariables> ?\n  [\n    options?: PreloadQueryOptions<NoInfer<TVariables>> &\n      Omit<TOptions, \"variables\">,\n  ]\n: [\n    options: PreloadQueryOptions<NoInfer<TVariables>> &\n      Omit<TOptions, \"variables\">,\n  ];\n\n/**\n * A function that will begin loading a query when called. It's result can be\n * read by `useReadQuery` which will suspend until the query is loaded.\n * This is useful when you want to start loading a query as early as possible\n * outside of a React component.\n *\n * @example\n * ```js\n * const preloadQuery = createQueryPreloader(client);\n * const queryRef = preloadQuery(query, { variables, ...otherOptions });\n *\n * function App() {\n *   return (\n *     <Suspense fallback={<div>Loading</div>}>\n *       <MyQuery />\n *     </Suspense>\n *   );\n * }\n *\n * function MyQuery() {\n *   const { data } = useReadQuery(queryRef);\n *\n *   // do something with `data`\n * }\n * ```\n */\nexport interface PreloadQueryFunction {\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <\n    TData,\n    TVariables extends OperationVariables,\n    TOptions extends Omit<PreloadQueryOptions, \"variables\">,\n  >(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    ...[options]: PreloadQueryOptionsArg<NoInfer<TVariables>, TOptions>\n  ): PreloadedQueryRef<\n    TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n      TOptions[\"returnPartialData\"] extends true ?\n        DeepPartial<TData> | undefined\n      : TData | undefined\n    : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n    : TData,\n    TVariables\n  >;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> & {\n      returnPartialData: true;\n      errorPolicy: \"ignore\" | \"all\";\n    }\n  ): PreloadedQueryRef<DeepPartial<TData> | undefined, TVariables>;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> & {\n      errorPolicy: \"ignore\" | \"all\";\n    }\n  ): PreloadedQueryRef<TData | undefined, TVariables>;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> & {\n      returnPartialData: true;\n    }\n  ): PreloadedQueryRef<DeepPartial<TData>, TVariables>;\n\n  /** {@inheritDoc @apollo/client!PreloadQueryFunction:interface} */\n  <TData = unknown, TVariables extends OperationVariables = OperationVariables>(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    ...[options]: PreloadQueryOptionsArg<NoInfer<TVariables>>\n  ): PreloadedQueryRef<TData, TVariables>;\n}\n\n/**\n * A higher order function that returns a `preloadQuery` function which\n * can be used to begin loading a query with the given `client`. This is useful\n * when you want to start loading a query as early as possible outside of a\n * React component.\n *\n * > Refer to the [Suspense - Initiating queries outside React](https://www.apollographql.com/docs/react/data/suspense#initiating-queries-outside-react) section for a more in-depth overview.\n *\n * @param client - The `ApolloClient` instance that will be used to load queries\n * from the returned `preloadQuery` function.\n * @returns The `preloadQuery` function.\n *\n * @example\n * ```js\n * const preloadQuery = createQueryPreloader(client);\n * ```\n * @since 3.9.0\n */\nexport function createQueryPreloader(\n  client: ApolloClient<any>\n): PreloadQueryFunction {\n  return wrapHook(\n    \"createQueryPreloader\",\n    _createQueryPreloader,\n    client\n  )(client);\n}\n\nconst _createQueryPreloader: typeof createQueryPreloader = (client) => {\n  return function preloadQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    options: PreloadQueryOptions<NoInfer<TVariables>> &\n      VariablesOption<TVariables> = Object.create(null)\n  ): PreloadedQueryRef<TData, TVariables> {\n    const queryRef = new InternalQueryReference(\n      client.watchQuery({\n        ...options,\n        query,\n      } as WatchQueryOptions<any, any>),\n      {\n        autoDisposeTimeoutMs:\n          client.defaultOptions.react?.suspense?.autoDisposeTimeoutMs,\n      }\n    );\n\n    return wrapQueryRef(queryRef) as PreloadedQueryRef<TData, TVariables>;\n  };\n};\n"],
  "mappings": "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",
  "names": ["React", "React", "React", "React", "React", "React", "init_lib", "DocumentType", "React", "init_lib", "React", "React", "React", "realHook", "__use", "noop", "internalState", "_a", "eagerMethods", "key", "execute", "options", "React", "init_lib", "setResult", "execute", "_a", "options", "mutation", "client", "React", "init_lib", "variables", "client", "subscription", "_a", "React", "React", "init_lib", "cache", "from", "diff", "React", "init_lib", "InternalQueryReference", "init_lib", "FragmentReference", "cache", "from", "SuspenseCache", "promise", "toApolloError", "options", "variables", "_a", "React", "options", "promise", "variables", "React", "from", "cache", "React", "options", "promise", "queryRef", "React", "React", "promise", "toApolloError"]
}
